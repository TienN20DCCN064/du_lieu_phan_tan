import { GlobalStore, DoiTuyen } from "/frontend/global/global.js";


import PrimaryKeys from './databaseKey.js';

const hamChung = {
    PrimaryKeys, // üëà cho ph√©p g·ªçi ·ªü n∆°i kh√°c: hamChung.primaryKeys["cau_thu"]
    async layDanhSach(table) {
        return await layDanhSach(table);
    },
    async layThongTinTheo_ID(table, id) {
        return await layThongTinTheo_ID(table, id);
    },
    async layThongTinTheo_2_ID(table, id, id2) {
        return await layThongTinTheo_2_ID(table, id, id2);
    },

    async taoID_theoBang(table) {
        return await taoID_theoBang(table);
    },

    async them(data, table_name) {
        return await them(data, table_name)
    },
    async sua(data, table_name) {
        return await sua(data, table_name)
    },
    async xoa(data, table_name) {
        return await xoa(data, table_name)
    },
    doiKhoangTrangThanhGachDuoi(tenFile) {
        return doiKhoangTrangThanhGachDuoi(tenFile)
    },
    getImage(public_id) {
        return getImage(public_id)
    },

    async uploadImage(file) {
        return uploadImage(file);
    },
    // uploadImage(imagePath) {
    //     return uploadImage(imagePath);
    // },
    // deleteImage(public_id) {
    //     return deleteImage(public_id);
    // },

    async taoTranDau_getHinhThucTaoDoi() {
        return await getHinhThucTaoDoi();
    },
    async taoTranDau_chiaBang(teams, danh_sach_doi_hat_dong, bangs, random = false) {
        return await taoTranDau_chiaBang(teams, danh_sach_doi_hat_dong, bangs, random);
    },
    async taoTranDau_vongTron(teams) {
        return await taoTranDau_vongTron(teams);
    },
    async taoTranDau_loaiTrucTiep(teams, randomize = false) {
        return await taoTranDau_loaiTrucTiep(teams, randomize);
    },


    async sendEmail(emailReceiver, subject, message) {
        return await sendEmail(emailReceiver, subject, message);
    }



};

async function layDanhSach(table) {
    console.log(GlobalStore.getLinkCongAPI() + table);
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table);
        return await response.json();
    } catch (error) {
        console.error(`L·ªói khi l·∫•y danh s√°ch ${table}:`, error);
        return [];
    }
}

// H√†m l·∫•y chi ti·∫øt theo ID
async function layThongTinTheo_ID(table, id) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table + "/" + id);
        return await response.json();
    } catch (error) {
        console.error(`L·ªói khi l·∫•y th√¥ng tin ${table} v·ªõi ID ${id}:`, error);
        return null;
    }
}
async function layThongTinTheo_2_ID(table, id, id2) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table + "/" + id + "/" + id2);
        return await response.json();
    } catch (error) {
        console.error(`L·ªói khi l·∫•y th√¥ng tin ${table} v·ªõi ID ${id}:`, error);
        return null;
    }
}



async function taoID_theoBang(table) {
    const primaryKeys = PrimaryKeys;
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table);
        const danhSach = await response.json();

        // L·∫•y kh√≥a ch√≠nh cho b·∫£ng t·ª´ ƒë·ªëi t∆∞·ª£ng √°nh x·∫°
        const keyColumns = primaryKeys[table] || ['id']; // N·∫øu kh√¥ng c√≥ trong √°nh x·∫° th√¨ d√πng 'id' l√†m m·∫∑c ƒë·ªãnh

        // Chuy·ªÉn "don_dat_ban" -> "ddb_"
        const prefix = table.split("_").map(word => word.charAt(0)).join("") + "_";

        //   console.log(prefix);
        if (!Array.isArray(danhSach) || danhSach.length === 0) {
            console.log(prefix);
            return `${prefix}0001`; // N·∫øu b·∫£ng r·ªóng, t·∫°o ID ƒë·∫ßu ti√™n
        }
        //s   console.log(prefix);

        // T√¨m ID l·ªõn nh·∫•t trong danh s√°ch theo c√°c kh√≥a ch√≠nh ƒë√£ x√°c ƒë·ªãnh
        const lastID = danhSach
            .map(item => keyColumns.map(key => item?.[key]).join("_")) // K·∫øt h·ª£p c√°c kh√≥a ch√≠nh l·∫°i v·ªõi nhau
            .filter(id => typeof id === "string" && id.startsWith(prefix)) // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu v√† prefix
            .sort()
            .pop();

        if (!lastID) {
            return `${prefix}0001`; // N·∫øu kh√¥ng t√¨m th·∫•y ID h·ª£p l·ªá
        }

        // L·∫•y s·ªë cu·ªëi c√πng, tƒÉng l√™n 1
        const numberPart = parseInt(lastID.split("_").pop()) || 0;
        const newID = `${prefix}${(numberPart + 1).toString().padStart(4, "0")}`;

        return newID;
    } catch (error) {
        console.error(`L·ªói khi l·∫•y danh s√°ch ${table}:`, error);
        return `${table.split("_").map(w => w.charAt(0)).join("")}_0001`; // ID m·∫∑c ƒë·ªãnh n·∫øu l·ªói
    }
}



async function them(data, table_name) {
    if (!data) {
        console.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const url = `${GlobalStore.getLinkCongAPI()}${table_name}`;

    // console.log("G·ª≠i POST request t·ªõi:", url);
    // console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", data);

    fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    })
        .then(async response => {
            const text = await response.text();
            if (!text.trim().startsWith("{") && !text.trim().startsWith("[")) {
                //      console.log("Ph·∫£n h·ªìi t·ª´ server:", text);
                return { message: text };
            }
            return JSON.parse(text);
        })
        .then(resData => {
            // alert(resData.message || "Th√™m d·ªØ li·ªáu th√†nh c√¥ng.");
            console.log("Th√™m th√†nh c√¥ng:", resData.message);
            //  table();
        })
        .catch(error => {
            console.error("C√≥ l·ªói x·∫£y ra khi th√™m:", error.message);
            alert(`L·ªói: ${error.message}`);
        });
}
async function sua(data, table_name) {

    const primaryKeys = PrimaryKeys[table_name];

    if (!data) {
        console.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        return;
    }
    if (!primaryKeys) {
        console.error(`B·∫£ng ${table_name} kh√¥ng h·ª£p l·ªá.`);
        alert("B·∫£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const keyValues = primaryKeys.map(key => data[key]);
    if (keyValues.some(value => value === undefined)) {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!", data);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!");
        return;
    }

    const idPath = keyValues.join("/");
    const url = `${GlobalStore.getLinkCongAPI()}${table_name}/${idPath}`;

    // console.log("G·ª≠i PUT request t·ªõi:", url);
    // console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", data);

    fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    })
        .then(async response => {
            const text = await response.text();

            // Ki·ªÉm tra n·∫øu ph·∫£n h·ªìi tr·ªëng ho·∫∑c kh√¥ng ph·∫£i JSON
            if (!text.trim().startsWith("{") && !text.trim().startsWith("[")) {
                //     console.log("Ph·∫£n h·ªìi t·ª´ server:", text);
                return { message: text }; // Tr·∫£ v·ªÅ m·ªôt object ch·ª©a message
            }

            return JSON.parse(text); // N·∫øu JSON h·ª£p l·ªá, parse b√¨nh th∆∞·ªùng
        })
        .then(resData => {
            console.error(`S·ª≠a th√†nh c√¥ng:`, resData.message);
            //   alert(resData.message || "S·ª≠a d·ªØ li·ªáu th√†nh c√¥ng.");
            // table();
        })
        .catch(error => {
            console.error("C√≥ l·ªói x·∫£y ra khi s·ª≠a:", error.message);
            alert(`L·ªói: ${error.message}`);
        });
}
async function xoa(keys, table_name) {
    const primaryKeysMap = PrimaryKeys;

    // Ki·ªÉm tra xem b·∫£ng c√≥ h·ª£p l·ªá kh√¥ng
    const primaryKeys = primaryKeysMap[table_name];
    if (!primaryKeys) {
        console.error(`B·∫£ng ${table_name} kh√¥ng h·ª£p l·ªá.`);
        alert("B·∫£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    // Ki·ªÉm tra `keys` c√≥ h·ª£p l·ªá kh√¥ng
    if (!keys || typeof keys !== "object") {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh ƒë·ªÉ x√≥a!", keys);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh ƒë·ªÉ x√≥a!");
        return;
    }

    // L·∫•y danh s√°ch gi√° tr·ªã c·ªßa kh√≥a ch√≠nh
    const keyValues = primaryKeys.map(key => keys[key]);

    // Ki·ªÉm tra xem t·∫•t c·∫£ gi√° tr·ªã c·ªßa kh√≥a ch√≠nh ƒë√£ c√≥ ch∆∞a
    if (keyValues.some(value => value === undefined || value === null)) {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!", keys);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!");
        return;
    }

    // T·∫°o ƒë∆∞·ªùng d·∫´n DELETE t·ª´ kh√≥a ch√≠nh
    const idPath = keyValues.join("/");
    const url = `${GlobalStore.getLinkCongAPI()}${table_name}/${idPath}`;

    console.log("G·ª≠i DELETE request t·ªõi:", url);

    try {
        const response = await fetch(url, { method: 'DELETE' });

        if (!response.ok) {
            console.error(`L·ªói HTTP ${response.status}: ${response.statusText}`);
            alert(`L·ªói x√≥a: ${response.statusText}`);
            return;
        }

        const text = await response.text();
        const resData = text.trim().startsWith("{") || text.trim().startsWith("[") ? JSON.parse(text) : { message: text };

        //  alert(resData.message || "X√≥a d·ªØ li·ªáu th√†nh c√¥ng.");
    } catch (error) {
        console.error("C√≥ l·ªói x·∫£y ra khi x√≥a:", error.message);
        alert(`L·ªói: ${error.message}`);
    }
}

async function getImage(publicId) {
    if (!publicId) {
        // console.error("publicId kh√¥ng h·ª£p l·ªá:", publicId);
        return null;
    }
    try {
        const url = GlobalStore.getLinkCongApi_image() + "/" + publicId;
        const response = await fetch(url);
        // const response = await fetch(`http://localhost:5000/api/image/${publicId}`);
        console.log("ƒê∆∞·ªùng d·∫´n ·∫£nh:", url);
        const data = await response.json();

        if (data.imageUrl) {
            //    console.log("Link ·∫£nh:", data.imageUrl);
            return data.imageUrl;
        } else {
            // console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c link ·∫£nh", data);
            return null;
        }
    } catch (error) {
        //  console.error("L·ªói khi g·ªçi API l·∫•y ·∫£nh:", error);
        return null;
    }
}
async function uploadImage(file) {
    if (!file) {
        alert('Vui l√≤ng ch·ªçn m·ªôt file ·∫£nh.');
        return null;
    }

    const formData = new FormData();
    formData.append('image', file);

    try {
        alert("ƒêang upload ·∫£nh...");
        const url = GlobalStore.getLinkCongApi_image()
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) throw new Error('Upload kh√¥ng th√†nh c√¥ng');

        const data = await response.json();

        if (data.imageUrl) {
            console.log('Upload th√†nh c√¥ng! Link ·∫£nh:', data.imageUrl);
            return data.imageUrl;
        } else {
            console.error('Upload th·∫•t b·∫°i:', data);
            return null;
        }
    } catch (error) {
        console.error('L·ªói upload:', error);
        return null;
    }
}

async function deleteImage(publicId) {
    if (!publicId) {
        alert('Thi·∫øu public_id ƒë·ªÉ x√≥a ·∫£nh.');
        return;
    }
    const url = GlobalStore.getLinkCongApi_image() + "/" + publicId;
    try {
        const response = await fetch(url, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (response.ok) {
            alert(`ƒê√£ x√≥a ·∫£nh th√†nh c√¥ng: ${publicId}`);
            console.log(data.message);
        } else {
            alert(`X√≥a ·∫£nh th·∫•t b·∫°i: ${data.error}`);
            console.error('L·ªói:', data.error);
        }
    } catch (error) {
        console.error('L·ªói khi g·ªçi API x√≥a ·∫£nh:', error);
    }
}
async function taoTranDau_chiaBang(teams, danh_sach_doi_hat_dong = [], bangs, random = false) {
    const url = GlobalStore.getLinkCongApi_taoTranDau() + "/chia-bang";

    try {
        const res = await fetch(url, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                teams,
                danh_sach_doi_hat_dong,
                bangs,
                random
            })
        });

        if (!res.ok) {
            throw new Error('C√≥ l·ªói x·∫£y ra khi g·ªçi API');
        }

        return await res.json();
    } catch (error) {
        console.error("L·ªói khi g·ªçi API:", error);
        return { error: error.message };
    }
}



// G·ªçi API v√≤ng tr√≤n
async function taoTranDau_vongTron(teams) {
    const url = GlobalStore.getLinkCongApi_taoTranDau() + "/" + "vong-tron";
    const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ teams })
    });
    return await res.json();
}

// G·ªçi API lo·∫°i tr·ª±c ti·∫øp
async function taoTranDau_loaiTrucTiep(teams, randomize = false) {
    const url = GlobalStore.getLinkCongApi_taoTranDau() + "/" + "loai-truc-tiep";
    const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ teams, randomize })
    });
    return await res.json();
}
async function getHinhThucTaoDoi() {
    const url = GlobalStore.getLinkCongApi_taoTranDau();
    try {
        const response = await fetch(url);
        const data = await response.json();
        console.log("K·∫øt qu·∫£:", data);
        return data;
    } catch (error) {
        console.error("L·ªói g·ªçi API:", error);
        return null;
    }
}


// l√∫c m√† upload ·∫£nh l√™n th√¨ public_id kh√¥ng ƒë∆∞·ª£c c√≥ kho·∫£ng tr·∫Øng, n√≥ s·∫Ω t·ª± ƒë·ªông thay th·∫ø b·∫±ng d·∫•u g·∫°ch d∆∞·ªõi
// n√™n khi l·∫•y v·ªÅ th√¨ ph·∫£i thay th·∫ø l·∫°i b·∫±ng kho·∫£ng tr·∫Øng
function doiKhoangTrangThanhGachDuoi(tenFile) {
    return tenFile.replace(/\s+/g, '_');
}

async function sendEmail(emailReceiver, subject, message) {
    const url = GlobalStore.getLinkCongApi_gmail() + "send-email";
    // const res = await fetch(url, {
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            email_receiver: emailReceiver,
            subject: subject,
            message: message
        })
    })
        .then(response => response.json())
        .then(data => {
            console.log('Ph·∫£n h·ªìi t·ª´ API:', data);
            alert(data.message);
        })
        .catch(error => {
            console.error('L·ªói khi g·ªçi API:', error);
            alert('G·ª≠i email th·∫•t b·∫°i!');
        });
}


// // G·∫Øn v√†o window ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p ·ªü m·ªçi n∆°i
// window.hamChung = hamChung;

export default hamChung;